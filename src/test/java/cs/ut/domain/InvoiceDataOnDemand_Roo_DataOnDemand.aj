// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package cs.ut.domain;

import cs.ut.domain.Invoice;
import cs.ut.domain.InvoiceDataOnDemand;
import cs.ut.domain.InvoiceStatus;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect InvoiceDataOnDemand_Roo_DataOnDemand {
    
    declare @type: InvoiceDataOnDemand: @Component;
    
    private Random InvoiceDataOnDemand.rnd = new SecureRandom();
    
    private List<Invoice> InvoiceDataOnDemand.data;
    
    public Invoice InvoiceDataOnDemand.getNewTransientInvoice(int index) {
        Invoice obj = new Invoice();
        setIsPaid(obj, index);
        setPurchaseOrderHRef(obj, index);
        setPurchaseOrderId(obj, index);
        setStatus(obj, index);
        return obj;
    }
    
    public void InvoiceDataOnDemand.setIsPaid(Invoice obj, int index) {
        Boolean isPaid = Boolean.TRUE;
        obj.setIsPaid(isPaid);
    }
    
    public void InvoiceDataOnDemand.setPurchaseOrderHRef(Invoice obj, int index) {
        String purchaseOrderHRef = "purchaseOrderHRef_" + index;
        obj.setPurchaseOrderHRef(purchaseOrderHRef);
    }
    
    public void InvoiceDataOnDemand.setPurchaseOrderId(Invoice obj, int index) {
        Long purchaseOrderId = new Integer(index).longValue();
        obj.setPurchaseOrderId(purchaseOrderId);
    }
    
    public void InvoiceDataOnDemand.setStatus(Invoice obj, int index) {
        InvoiceStatus status = null;
        obj.setStatus(status);
    }
    
    public Invoice InvoiceDataOnDemand.getSpecificInvoice(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Invoice obj = data.get(index);
        Long id = obj.getId();
        return Invoice.findInvoice(id);
    }
    
    public Invoice InvoiceDataOnDemand.getRandomInvoice() {
        init();
        Invoice obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Invoice.findInvoice(id);
    }
    
    public boolean InvoiceDataOnDemand.modifyInvoice(Invoice obj) {
        return false;
    }
    
    public void InvoiceDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Invoice.findInvoiceEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Invoice' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Invoice>();
        for (int i = 0; i < 10; i++) {
            Invoice obj = getNewTransientInvoice(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
